<?php
/**
 * Plugin Name: shareThat Site Traffic Builder
 * Plugin URI: http://www.sharethat.com
 * Description: Build site traffic and generate leads with gameified promotions displayed as a clickable image in the sidebar. When clicked, a lightbox with one of the gameified promotions is displayed and visitors play to win entries in a $100 prize drawing held each month. Use shortcodes to conveniently include promotions in posts. All aspects of the gameified promotions can be fully customized to meet any theme design. The promotions are socially integrated with Facebook, Twitter, and Google+, with all links generated by social activity linking back to the WordPress site on which the game was played.
 * Version: 1.0
 * Author: AdelaVoice
 * Author URI: http://www.sharethat.com
 * Text Domain: sharethat
 * License: GPLv2
 *
*/
?>
<?php 
/*
Copyright 2013 AdelaVoice Corporation  (email : legal@adelavoice.com)

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License, version 2, as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
?>
<?php
/**
 * Global Variables
 */
$GLOBALS["sharethat_content_endpoint_prefix"] 				= 'http://www.sharethat.com/wordpress/';
$GLOBALS["sharethat_service_create_promo_endpoint"] 		= 'http://service.sharethat.com/api/create_promo_widget';
$GLOBALS["sharethat_service_connect_account_endpoint"] 		= 'http://service.sharethat.com/api/connect_wordpress_account';
$GLOBALS["sharethat_service_disconnect_account_endpoint"] 	= 'http://service.sharethat.com/api/disconnect_wordpress_account';
$GLOBALS["json_format"]										= 'json';
$GLOBALS["developer_mode"]									= FALSE;

$GLOBALS["wordpress_public_key"]							= 'pZnwlElhjM3skUMmqplyJy1maCNOYdrr';
$GLOBALS["wordpress_private_key"]							= '5SAmWeGd9Xi9lbeCbyyPmhDRIQiWqcQi';

/**
 * Conditioned error_log method
 * 
 * @param string $message Message to be output to the php error log
 */
function stgp_error_log($message) {
	if ($GLOBALS["developer_mode"]) {
		error_log($message);
	}
}

/**
 * Activation and uninstall hooks
 */ 
register_activation_hook(__FILE__, 'stgp_sharethat_activate');
function stgp_sharethat_activate() {
	
	stgp_error_log(__LINE__ . " Activating!");

	stgp_sharethat_create_widget();

	// Register the uninstall function
	//
	register_uninstall_hook(__FILE__, 'stgp_sharethat_uninstaller');
}
function stgp_sharethat_uninstaller() {
	
	delete_option('stgp_sharethat_baa_ic');
	delete_option('stgp_sharethat_owner_code');
	delete_option('stgp_sharethat_mci');
	delete_option('stgp_sharethat_widget_code');
	delete_option('stgp_sharethat_iframe_code');
	delete_option('stgp_sharethat_interactive_code');
	delete_option('stgp_sharethat_settings_code');
	delete_option('stgp_sharethat_login_token');
	delete_option('stgp_sharethat_email');
	
	stgp_error_log(__LINE__ . " Options deleted");
}

/**
 * Disconnect from sharethat.com account on deactivate
 */
register_deactivation_hook(__FILE__, 'stgp_sharethat_deactivate');
function stgp_sharethat_deactivate() {
	
	stgp_error_log(__LINE__ . " Disconnecting...");
	stgp_sharethat_disconnect();
	stgp_error_log(__LINE__ . " Disconnected");
	
	// Uninstall when deactivated in developer mode (to allow
	// us to start from scratch on a re-install).
	//
	if ($GLOBALS["developer_mode"]) {
		stgp_sharethat_uninstaller();
	}
}

/**
 * Register with hook 'wp_enqueue_scripts',
 * which can be used for front end CSS and JavaScript
 */
add_action( 'wp_enqueue_scripts', 'stgp_sharethat_stylesheets' );
function stgp_sharethat_stylesheets() {
	// Respects SSL, Style.css is relative to the current file
	wp_register_style( 'prefix-style', plugins_url('/css/sharethat.css', __FILE__) );
	wp_enqueue_style( 'prefix-style' );
}

/**
 * Register our "sharethat" shortcode
 */
add_shortcode('sharethat', 'stgp_sc_sharethat');
function stgp_sc_sharethat() {
	$iframe_html = get_option('stgp_sharethat_iframe_code');
	if ($iframe_html !== false) {
		return $iframe_html;
	}
}

/**
 * Register our "sharethat_widget" shortcode
 */
add_shortcode('sharethat_widget', 'stgp_sc_sharethat_widget');
function stgp_sc_sharethat_widget() {
	$widget_html = get_option('stgp_sharethat_widget_code');
	if ($widget_html !== false) {
		return $widget_html;
	}
}

/**
 * Adds code to all pages so that any inbound link with the right MCI on it will
 * trigger the popup.
 */
add_action('wp_footer', 'stgp_template_footer');
function stgp_template_footer() {
	$widget_html = get_option('stgp_sharethat_widget_code');
	if ($widget_html !== false) {
		echo "<div style='position: absolute; top: 0px; left: -1000px; display: none;'>$widget_html</div";
	}
}

/**
 * Create a shareThat promo widget
 * 
 * Creates a shareThat promo widget using the shareThat REST API. The plug-in
 * will receieve baa_ic and mci codes that are put in the option database
 * and used for all future interaction with the shareThat service. Also received
 * is the private_key to be used on future instantiations of the promo widget.
 * These values are removed from the options database when the plug-in is uninstalled.
 */
function stgp_sharethat_create_widget() {
	$baa_ic = get_option('stgp_sharethat_baa_ic');
	stgp_error_log(__LINE__ . " Our baa_ic: " . $baa_ic);
	if ($baa_ic === false) {
		// Need to access shareThat service endpoint and get our widget codes.
		//
		$nonce = md5(time());
		$params = array("format" => $GLOBALS["json_format"], "api_key" => $GLOBALS["wordpress_public_key"], "nonce" => $nonce);
		$params['host_url'] = plugin_dir_url(__FILE__);
		$params["api_sig"] = stgp_sharethat_sign_request($params);
		$response = wp_remote_post($GLOBALS["sharethat_service_create_promo_endpoint"], array('body' => $params, 'timeout' => 30));
		if (is_wp_error($response)) {
			$error = $response->get_error_message();
			deactivate_plugins(basename(__FILE__));
		} else {
			stgp_error_log(__LINE__ . " Response:");
			stgp_error_log(print_r($response, true));
			$json = json_decode($response['body'], true);
			if (!array_key_exists('baa_ic', $json) || 
				!array_key_exists('mci', $json) || 
				!array_key_exists('wp_owner_code', $json) || 
				!array_key_exists('wp_iframe_code', $json) || 
				!array_key_exists('wp_widget_code', $json)) {
				deactivate_plugins(basename(__FILE__));
				return;
			}
			// We successfully created our widget instance
			//
			add_option('stgp_sharethat_baa_ic', $json["baa_ic"]);
			add_option('stgp_sharethat_mci', $json["mci"]);
			add_option('stgp_sharethat_widget_code', $json["wp_widget_code"]);
			add_option('stgp_sharethat_owner_code', $json["wp_owner_code"]);
			add_option('stgp_sharethat_iframe_code', $json["wp_iframe_code"]);
			
			stgp_error_log(__LINE__ . " Options Created " . $json["baa_ic"]);
		}
	}
}

/**
 * Disconnects the plugin from the associated sharethat.com account
 * 
 * @return string|boolean true on success, or a string message on error
 */
function stgp_sharethat_disconnect() {
	$login_token = get_option('stgp_sharethat_login_token');
	stgp_error_log(__LINE__ . " Disconnecting $login_token");
	if ($login_token !== false) {
		$nonce = md5(time());
		$params = array (
				"format" => $GLOBALS["json_format"],
				"api_key" => $GLOBALS ["wordpress_public_key"],
				"nonce" => $nonce 
		);
		$params ['login_token'] = $login_token;
		$params ['baa_ic'] = get_option('stgp_sharethat_baa_ic');
		$params ['mci'] = get_option('stgp_sharethat_mci');
		$params ['owner_code'] = get_option('stgp_sharethat_owner_code');
		$params ['api_sig'] = stgp_sharethat_sign_request($params);
		stgp_error_log(__LINE__ . " -------");
		stgp_error_log(print_r($params, true));
		$response = wp_remote_post($GLOBALS ["sharethat_service_disconnect_account_endpoint"], array (
				'body' => $params,
				'timeout' => 30 
		));
		if (is_wp_error($response)) {
			$error = $response->get_error_message();
			return $error;
		} else {
			$json = json_decode($response ['body'], true);
			stgp_error_log($response ['body']);
			stgp_error_log(print_r($json, true));
			if (($json === null) || ! array_key_exists('baa_ic', $json) || ! array_key_exists('wp_widget_code', $json)) {
				return "Missing parameters returned from sharethat.com service.";
			} else {
				// We successfully disconnected from a sharethat.com account
				//
				update_option('stgp_sharethat_baa_ic', $json ["baa_ic"]);
				update_option('stgp_sharethat_widget_code', $json ["wp_widget_code"]);
				update_option('stgp_sharethat_iframe_code', $json ["wp_iframe_code"]);
				
				$o = get_option("stgp_sharethat_baa_ic");
				stgp_error_log(__LINE__ . " $o // " .$json ["baa_ic"] );
				
				delete_option('stgp_sharethat_settings_code');
				delete_option('stgp_sharethat_login_token');
				delete_option('stgp_sharethat_email');
				
				return true;
			}
		}
	}
}

/**
 * Connect us to a sharethat.com account
 *
 * Creates a shareThat promo widget using the shareThat REST API. The plug-in
 * will receieve baa_ic and mci codes that are put in the option database
 * and used for all future interaction with the shareThat service. Also received
 * is the private_key to be used on future instantiations of the promo widget.
 * These values are removed from the options database when the plug-in is uninstalled.
 */
function stgp_sharethat_connect($login_token) {
		
	$nonce = md5(time());
	$params = array("format" => $GLOBALS["json_format"], "api_key" => $GLOBALS["wordpress_public_key"], "nonce" => $nonce);
	$params['login_token'] = $login_token;
	$params['baa_ic'] = get_option('stgp_sharethat_baa_ic');
	$params['mci'] = get_option('stgp_sharethat_mci');
	$params['owner_code'] = get_option('stgp_sharethat_owner_code');
	$params['api_sig'] = stgp_sharethat_sign_request($params);
	stgp_error_log(__LINE__ . " -------");
	stgp_error_log(print_r($params, true));
	$response = wp_remote_post($GLOBALS["sharethat_service_connect_account_endpoint"], array('body' => $params, 'timeout' => 30));
	if (is_wp_error($response)) {
		$error = $response->get_error_message();
		return $error;
	} else {
		$json = json_decode($response['body'], true);
		stgp_error_log($response['body']);
		stgp_error_log(print_r($json, true));
		if (array_key_exists("error", $json)) {
			return $json["error"]["message"];
		} else if (($json === null) ||
			!array_key_exists('baa_ic', $json) ||
			!array_key_exists('sharethat_login_token', $json) ||
			!array_key_exists('email', $json) ||
			!array_key_exists('wp_widget_code', $json)) {
			return "Missing parameters returned from sharethat.com service.";
		} else {
			// We successfully connected to a sharethat.com account
			//
			stgp_error_log(__LINE__ . " Connected [" . $json["sharethat_login_token"] . "]");
			update_option('stgp_sharethat_baa_ic', $json["baa_ic"]);
			update_option('stgp_sharethat_widget_code', $json["wp_widget_code"]);
			update_option('stgp_sharethat_iframe_code', $json ["wp_iframe_code"]);
			add_option('stgp_sharethat_login_token', $json["sharethat_login_token"]);
			add_option('stgp_sharethat_email', $json["email"]);
			stgp_error_log(__LINE__ . " " . get_option('stgp_sharethat_login_token'));
			return true;
		}
	}
}

/**
 * Add signature to paramaters
 * 
 * Calls to the shareThat service require a signature. This function generates
 * the proper sigature from the keys specified.
 * 
 * @param array $params 		Array of key value paired parameters that a signature will
 * 								be created for.
 * @param string $private_key 	Private key to use when signing the parameters.
 * @param array $ignore_keys 	Array of key names to ignore while signing.
 */
function stgp_sharethat_sign_request($params, $private_key = false, $ignore_keys = array()) {

	if ($private_key === FALSE) {
		$private_key = $GLOBALS["wordpress_private_key"];
	}
	
	$sig = $private_key;
	ksort($params);
	foreach ($params as $key => $val) {
		if (($key == 'api_sig') || in_array($key, $ignore_keys)) {
			continue;
		}
		$sig .= $key . $val;
	}
	$api_sig = strtolower(md5($sig));
	
	return $api_sig;
}

/**
 * Add admin menus
 */
add_action('admin_menu', 'stgp_sharethat_create_menu', 1000);
function stgp_sharethat_create_menu() {
	add_menu_page('shareThat', 'Sharethat', 'manage_options', 'sharethat', 'stgp_sharethat_settings_page', 'div');
	
	// If we have a login_token query string parameters, then
	// try to connect the associated account.
	//
	$GLOBALS ["error_message"] = false;
	$GLOBALS ["error_title"] = false;
	if (false === get_option("stgp_sharethat_login_token")) {
		$login_token = array_key_exists("login_token", $_GET) ? $_GET ['login_token'] : false;
		if ($login_token !== false) {
			$result = stgp_sharethat_connect($login_token);
			stgp_error_log(__LINE__ . " " . $result);
			if ($result !== true) {
				$GLOBALS['error_message'] = $result;
				$GLOBALS['error_title'] = "Connect Failed";
			}
		}
	}
	
	// Setup our menu items based on our login state
	//
	if (get_option("stgp_sharethat_login_token")) {
		add_submenu_page('sharethat', 'shareThat Settings', 'Settings', 'manage_options', 'sharethat', 'stgp_sharethat_settings_page');
		add_submenu_page('sharethat', 'shareThat Stats', 'Stats', 'manage_options', 'sharethat_stats', 'stgp_sharethat_stats_page');
		add_submenu_page('sharethat', 'shareThat Leads', 'Leads', 'manage_options', 'sharethat_leads', 'stgp_sharethat_leads_page');
		add_submenu_page('sharethat', 'shareThat Interstitials', 'Interstitials', 'manage_options', 'sharethat_popups', 'stgp_sharethat_popups_page');
		add_submenu_page('sharethat', 'shareThat Account', 'Account', 'manage_options', 'sharethat_account', 'stgp_sharethat_accont_page');
		add_submenu_page('sharethat', 'shareThat Pricing', 'Pricing', 'manage_options', 'sharethat_pricing', 'stgp_sharethat_pricing_page');
	} else {
		add_submenu_page('sharethat', 'shareThat Settings', 'Connect', 'manage_options', 'sharethat', 'stgp_sharethat_settings_page');
		add_submenu_page('sharethat', 'shareThat Pricing', 'Pricing', 'manage_options', 'sharethat_pricing', 'stgp_sharethat_pricing_page');
	}

	add_filter( 'custom_menu_order','stgp_sharethat_admin_menu_order');
	add_filter( 'menu_order', 'stgp_sharethat_menu_order');
}

/**
 * Render various admin pages from backend subdirectory
 */
function stgp_sharethat_settings_page() {
	$page_type = "settings";
	include plugin_dir_path( __FILE__ ) . 'backend/service.php';
}
function stgp_sharethat_pricing_page() {
	$page_type = "pricing";
	include plugin_dir_path( __FILE__ ) . 'backend/service.php';
}
function stgp_sharethat_accont_page() {
	$page_type = "account";
	include plugin_dir_path( __FILE__ ) . 'backend/service.php';
}
function stgp_sharethat_stats_page() {
	$page_type = "stats";
	include plugin_dir_path( __FILE__ ) . 'backend/service.php';
}
function stgp_sharethat_leads_page() {
	$page_type = "leads";
	include plugin_dir_path( __FILE__ ) . 'backend/service.php';
}
function stgp_sharethat_popups_page() {
	$page_type = "popups";
	include plugin_dir_path( __FILE__ ) . 'backend/service.php';
}

/**
 * Position menu item
 */
function stgp_sharethat_admin_menu_order() {
	return true;
}
function stgp_sharethat_menu_order($menu_order) {
	$stgp_menu_order = array();
	
	foreach ( $menu_order as $index => $item ) {
		if ( $item != 'sharethat' )
			$stgp_menu_order[] = $item;
	
		if ( $index == 0 )
			$stgp_menu_order[] = 'sharethat';
	}
	
	return $stgp_menu_order;
}

/**
 * Output admin menu CSS
 */
add_action('admin_head', 'stgp_sharethat_admin_menu_css');
function stgp_sharethat_admin_menu_css() { ?>
<style type="text/css" id="sharethat-menu-css">
#toplevel_page_sharethat .wp-menu-image {
	background: url(<?php echo plugins_url('/images/sharethat-menu-icon.png', __FILE__)?>
		 
		
		 ) 0 90% no-repeat;
}
/* Retina shareThat Menu Icon */
@media only screen and (-moz-min-device-pixel-ratio: 1.5) , only screen and
		(-o-min-device-pixel-ratio: 3/2) , only screen and
		(-webkit-min-device-pixel-ratio: 1.5) , only screen and
	(min-device-pixel-ratio: 1.5) {
	#toplevel_page_sharethat .wp-menu-image {
		background: url(<?php echo plugins_url('/images/sharethat-menu-icon-2x.png',
			__FILE__)?>     ) 0 90% no-repeat;
		background-size: 30px 64px;
	}
}

#toplevel_page_sharethat.current .wp-menu-image,#toplevel_page_sharethat.wp-has-current-submenu .wp-menu-image,#toplevel_page_sharethat:hover .wp-menu-image
	{
	background-position: top left;
}
</style><?php
}

/**
 * Wordpress widget class for sharethat widget
 */
add_action('widgets_init', 'stgp_stharthat_register_widgets');
function stgp_stharthat_register_widgets() {
	register_widget('stgp_sharethat_widget');
}
class stgp_sharethat_widget extends WP_WIDGET {

	/**
	 * Constructor
	 */
	function __construct() {
		$widget_ops = array('classname' => 'stgp_sharethat_widget_css_class', 'description' => 'shareThat Promotion');
		$this->WP_Widget('stgp_sharethat_widget', 'shareThat Promotion', $widget_ops);
	}
	
	/**
	 * Back-end widget form.
	 *
	 * @see WP_Widget::form()
	 *
	 * @param array $instance Previously saved values from database.
	 */
	function form($instance) {
		$defaults = array('title' => '');
		$instance = wp_parse_args((array) $instance, $defaults);
		$title = $instance['title'];
		?>
<p>
	<label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php echo 'Title:'; ?></label>
	<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>"
		name="<?php echo $this->get_field_name('title'); ?>" type="text"
		value="<?php echo esc_attr($title); ?>" />
</p><?php
	}
	
	/**
	 * Sanitize widget form values as they are saved.
	 *
	 * @see WP_Widget::update()
	 *
	 * @param array $new_instance Values just sent to be saved.
	 * @param array $old_instance Previously saved values from database.
	 *
	 * @return array Updated safe values to be saved.
	 */
	function update($new_instance, $old_instance) {
		stgp_error_log("update()");
		stgp_error_log(print_r($new_instance, true));
		stgp_error_log(print_r($old_instance, true));
		$instance = array();
		$instance['title'] = (!empty( $new_instance['title'])) ? strip_tags($new_instance['title']) : '';
		return $instance;
	}
	
	/**
	 * Front-end display of widget.
	 *
	 * @see WP_Widget::widget()
	 *
	 * @param array $args     Widget arguments.
	 * @param array $instance Saved values from database.
	 */
	function widget($args, $instance) {
		extract($args);

		echo $before_widget;
		$title = apply_filters('widget_title', $instance['title']);
		if (!empty($title)) {
			echo $before_title;
			echo $title;
			echo $after_title;
		}
		$widget_html = get_option('stgp_sharethat_widget_code');
		if ($widget_html !== false) {
			echo "<div style='text-align: center;'>$widget_html</div>";
		}
		
		echo $after_widget;
	}
}
?>